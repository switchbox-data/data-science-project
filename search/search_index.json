{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Switchbox Copier Template","text":"<p>This is a modern copier template you can use to create python and R data science projects, using modern tools, including devcontainers.</p> <p>It supports the following features:</p>"},{"location":"#python-data-science","title":"Python data science","text":"<ul> <li>PyData packages: polars, seaborn</li> <li>Quarto notebooks</li> <li>uv for dependency management</li> <li>ruff for code linting and formatting</li> <li>ty for type checking</li> </ul>"},{"location":"#r-data-science","title":"R data science","text":"<ul> <li>Tidyverse packages: dplyr, ggplot2, etc.</li> <li>Quarto notebooks</li> <li>pak for dependency management</li> <li>air for code formatting</li> <li>radian for R console</li> <li>Fast install of binary packages via P3M</li> </ul>"},{"location":"#python-packages","title":"Python packages","text":"<ul> <li>Modern python tooling: uv, ruff, ty, pytest, tox</li> <li>hatchling for package building</li> <li>twine for package publishing</li> <li>MkDocs documentation with Material theme</li> </ul>"},{"location":"#all-projects","title":"All projects","text":"<ul> <li>just for task automation and project management</li> <li>devcontainers for consistent development environments in VSCode, Cursor, Positron, and other IDEs</li> <li>prek for fast pre-commit hooks that automate code quality checks</li> <li>AWS integration (Optional): (aws cli, boto3 for Python)</li> <li>GitHub Actions Workflows (Optional): to run code quality checks and tests via CI/CD</li> </ul>"},{"location":"#quickstart","title":"Quickstart","text":"<p>First, make sure you have copier installed. We recommend doing this with uv or pipx:</p> <pre><code>uv tool install copier # or: pipx install copier\n</code></pre> <p>On your local machine, navigate to the directory in which you want to create your project, and run the following command:</p> <pre><code>copier copy https://github.com/switchbox-data/switchbox-copier-template &lt;my-project&gt;\n</code></pre> <p>Where <code>&lt;my-project&gt;</code> is the name you want to give your project. This will be used as the directory name, and as the name of your repo if you use GitHub. </p> <p>Follow the prompts to configure your project. Once completed, a new directory containing your project will be created. Then navigate into your newly created project directory and follow the instructions in the <code>README.md</code> to complete the setup of your project.</p>"},{"location":"#acknowledgements","title":"Acknowledgements","text":"<p>This project is inspired by the cookiecutter-uv package.</p>"},{"location":"promp_arguments/","title":"Prompt Arguments","text":"<p>When running the <code>copier copy</code> command, you'll be prompted with several questions to configure your project. Here's what each option does:</p> <p>author</p> <p>Your full name. This will be used in documentation, license files, and package metadata.</p> <p>email</p> <p>Your email address. Used for package metadata and contact information.</p> <p>author_github_handle</p> <p>Your GitHub username or organization. This is used to set up repository URLs and documentation links.</p> <p>project_description</p> <p>A short description of your project. This appears in README files, package metadata, and documentation.</p> <p>project_features</p> <p>This is a multiselect option where you can choose one or more project types:</p> <ul> <li><code>python_data_science</code>: Sets up a Python data science environment with:</li> <li>Polars, PyArrow, Seaborn, NumPy for data analysis</li> <li>Quarto notebooks for reproducible research</li> <li> <p>Modern Python tooling (uv, ruff, ty)</p> </li> <li> <p><code>r_data_science</code>: Sets up an R data science environment with:</p> </li> <li>Tidyverse libraries (ggplot2, dplyr, etc.)</li> <li>Quarto notebooks</li> <li>Modern R tooling (pak, air, radian)</li> <li> <p>Fast package installation via P3M</p> </li> <li> <p><code>python_package</code>: Creates a Python package with:</p> </li> <li>Build tools (hatchling)</li> <li>Testing framework (pytest, tox)</li> <li>Documentation (MkDocs with Material theme)</li> <li>Publishing workflow (PyPI)</li> </ul> <p>You can select multiple features! Here are some common combinations:</p> <p>Python data science project:</p> <pre><code>project_features: [\"python_data_science\"]\n</code></pre> <p>R data science project:</p> <pre><code>project_features: [\"r_data_science\"]\n</code></pre> <p>Polyglot data science project:</p> <pre><code>project_features: [\"python_data_science\", \"r_data_science\"]\n</code></pre> <p>Python package for distribution:</p> <pre><code>project_features: [\"python_package\"]\n</code></pre> <p>Hybrid python project (data science + package):</p> <pre><code>project_features: [\"python_data_science\", \"python_package\"]\n</code></pre> <p>use_github</p> <p><code>true</code> or <code>false</code>. When enabled, this adds: - GitHub Actions workflows for CI/CD - Issue and pull request templates - Automated testing and deployment - Documentation publishing to GitHub Pages</p> <p>open_source_license</p> <p>Choose a license for your project. Options: - <code>MIT license</code> - Permissive, widely used - <code>BSD license</code> - Similar to MIT, with additional attribution requirements - <code>ISC license</code> - Very permissive, minimal text - <code>Apache Software License 2.0</code> - Includes patent protection - <code>GNU General Public License v3</code> - Copyleft, requires derivative works to be open source - <code>Not open source</code> - No license file generated</p> <p>aws</p> <p><code>true</code> or <code>false</code>. When enabled, includes: - AWS CLI configuration - Boto3 for Python projects - AWS-related development tools and examples</p>"},{"location":"promp_arguments/#computed-variables","title":"Computed Variables","text":"<p>The template automatically computes several values based on your choices:</p> <p>project_name: Automatically set to the directory name you specify when running copier</p> <p>project_slug: Automatically generated from project_name by converting to lowercase and replacing hyphens with underscores. This is used for: - Python package names - Import statements: <code>from project_slug import module</code> - Directory structures</p>"},{"location":"tutorial/","title":"Tutorial","text":"<p>This page contains a complete tutorial on how to create your project.</p>"},{"location":"tutorial/#step-1-install-copier","title":"Step 1: Install copier","text":"<p>To start, we will need to install <code>copier</code>. </p> <p>We recommend doing so with <code>uv</code>. If you don't have <code>uv</code>, installation instructions can be found here. For MacOS or Linux;</p> <pre><code>curl -LsSf https://astral.sh/uv/install.sh | sh\n</code></pre> <p>Then you can use <code>uv</code> to install <code>copier</code>:</p> <pre><code>uv tool install copier\n</code></pre> <p>Alternatively, once you have <code>uv</code> installed, you can use <code>uvx</code> to use <code>copier</code> without actually installing it:</p> <pre><code>uvx copier copy ...\n</code></pre>"},{"location":"tutorial/#step-2-generate-your-project","title":"Step 2: Generate your project","text":"<p>On your local machine, navigate to the directory in which you want to create your project, and run the following command:</p> <pre><code>copier copy --trust https://github.com/switchbox-data/data-science-project.git &lt;project-name&gt;\n</code></pre> <p>For an explanation of the prompt arguments, see Prompt Arguments.</p> <p>Follow the prompts to configure your project. Once completed, a new directory containing your project will be created. A git repo will automatically be created, and the generated files will be committed.</p>"},{"location":"tutorial/#step-3-set-up-your-github-repository","title":"Step 3: Set up your Github repository","text":"<p>Create an empty new repository on Github. Give it a name that matches <code>&lt;project-name&gt;</code> above. The name should contain alphanumeric characters and optionally <code>-</code>.</p> <p>DO NOT check any boxes under the option <code>Initialize this repository with</code>.</p>"},{"location":"tutorial/#step-4-upload-your-project-to-github","title":"Step 4: Upload your project to Github","text":"<p>Run the following commands, replacing <code>&lt;project-name&gt;</code> with the name that you also gave the Github repository and <code>&lt;github_author_handle&gt;</code> with the Github username or organization where you made your repo.</p> <pre><code>cd &lt;project_name&gt;\ngit remote add origin git@github.com:&lt;github_author_handle&gt;/&lt;project_name&gt;.git\ngit push -u origin main\n</code></pre>"},{"location":"tutorial/#step-5-set-up-your-development-environment","title":"Step 5: Set Up Your Development Environment","text":"<p>Initially, the CI/CD pipeline will fail for two reasons:</p> <ul> <li>The project does not yet contain a <code>uv.lock</code> file</li> <li>There are a few formatting issues in the project</li> </ul> <p>To fix that, we first install the environment and the pre-commit hooks with:</p> <pre><code>just install\n</code></pre> <p>This will generate the <code>uv.lock</code> file</p>"},{"location":"tutorial/#step-6-run-the-pre-commit-hooks","title":"Step 6: Run the pre-commit hooks","text":"<p>Now, to resolve the formatting issues, let's run the pre-commit hooks:</p> <pre><code>uv run pre-commit run -a\n</code></pre>"},{"location":"tutorial/#7-commit-the-changes","title":"7. Commit the changes","text":"<p>Now we commit the changes made by the two steps above to the repository:</p> <pre><code>git add .\ngit commit -m 'Fix formatting issues'\ngit push origin main\n</code></pre>"}]}